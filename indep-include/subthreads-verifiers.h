/* Autogenerated file */
#if __cplusplus > 201703L
template<int N, typename R, typename... A, typename... B>
static inline int thread_call_function_async_2(thread_t thread, R (*function)(A...), int argcount, B... args)
{
	using namespace simplemail;
	static_assert(N == sizeof...(B));
	static_assert(sizeof...(A) == sizeof...(B));
	static_assert(is_convertible<tuple<A...>, tuple<B...>>::convertible == true);
	return thread_call_function_async_(thread, (void *)function, argcount, args...);
}
#define thread_call_function_async(thread, function, argcount, ...) \
	thread_call_function_async_2<argcount>(thread, function, argcount __VA_OPT__(,) __VA_ARGS__)
#elif __cplusplus >= 201103L
template<typename R, typename... A, typename... B>
static inline int thread_call_function_async(thread_t thread, R (*function)(A...), int argcount, B... args)
{
	using namespace simplemail;
	static_assert(sizeof...(A) == sizeof...(B));
	static_assert(is_convertible<tuple<A...>, tuple<B...>>::convertible == true);
	return thread_call_function_async_(thread, (void *)function, argcount, args...);
}
#else
#define thread_call_function_async thread_call_function_async_
#endif
